@model List<u24634400_INF272_Prac2.Models.MyModel>
@{
    ViewBag.Title = "People List";
}

<h2>People List</h2>

<p>
    <a class="btn btn-success" href="@Url.Action("CreatePeopleView", "People")">Add New Person</a>
</p>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<!-- Search input for real-time highlighting -->
<input type="text" id="searchBox" placeholder="Search by first name" class="form-control" style="max-width: 300px; display: inline-block; margin-bottom: 20px;" />

<table id="peopleTable" class="table table-bordered" style="width: 80%;">
    <thead>
        <tr>
            <th>Student Number</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email Address</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.StudentNumber</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.EmailAddress</td>
                <td>
                    <button class="btn btn-success" onclick="deleteRow(this)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- LocalStorage Controls -->
<div style="margin-top: 20px;">
    <button class="btn btn-primary" onclick="saveToLocalStorage()">Save to Local Storage</button>
    <button class="btn btn-warning" onclick="loadFromLocalStorage()">Load from Local Storage</button>
    <button class="btn btn-danger" onclick="clearLocalStorage()">Clear Local Storage</button>
</div>

<style>
    .highlight td{
        color: red !important;
        font-weight: bold;
        transition: color 0.5s ease-in-out;
    }
</style>

<script>
    const highlightTimers = new Map();

    document.getElementById("searchBox").addEventListener("input", function () {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll("#peopleTable tbody tr");

        rows.forEach(row => {
            const firstNameCell = row.cells[1];
            if (!firstNameCell) return;

            const firstName = firstNameCell.textContent.toLowerCase();

            if (searchTerm !== "" && firstName.includes(searchTerm)) {
                row.classList.add("highlight");

                if (highlightTimers.has(row)) {
                    clearTimeout(highlightTimers.get(row));
                }

                const timer = setTimeout(() => {
                    row.classList.remove("highlight");
                    highlightTimers.delete(row);
                }, 3000);

                highlightTimers.set(row, timer);
            } else {
                row.classList.remove("highlight");
            }
        });
    });

    function saveToLocalStorage() {
        const tableBodyHtml = document.querySelector("#peopleTable tbody").innerHTML;
        localStorage.setItem("peopleTableHtml", tableBodyHtml);
        alert("Table saved to local storage.");
    }

    function loadFromLocalStorage() {
        const savedHtml = localStorage.getItem("peopleTableHtml");
        if (savedHtml) {
            document.querySelector("#peopleTable tbody").innerHTML = savedHtml;
            alert("Table loaded from local storage.");
        } else {
            alert("No saved table found in local storage.");
        }
    }

    function clearLocalStorage() {
        localStorage.removeItem("peopleTableHtml");
        alert("Local storage cleared.");
    }

    function deleteRow(button) {
        const row = button.closest("tr");
        row.remove();
    }
</script> 